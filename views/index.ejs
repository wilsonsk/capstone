<%- include('header') -%>

<!-- 
    So this means, if we initially have content, go ahead and render it, but after the JavaScript environment loads up, React is going to take over this root div, 
    and it will replace the content of the root div with the React application.
    This will help us when we want to do server-side rendering. So let's go back to the arguments of the create element API method. 
    The first argument to create element is the HTML tag type, so let's render an h2.
-->

<!--
    //It's not really necessary to go back to the server because we already have this data. 
    //However, this is one solution to the problem that is not too bad if you're okay with a client going back to the data api. 
    //I'll show you another solution that does not require us to go back to the api to fetch the data for the react component. 
    //And that solution is to also return the data itself from the server. So in server render, when we returned the DOM itself here, I'm going to go ahead and return two things.
    
    //I'm going to return the initial markup that we need, and this would be the exact thing we returned before and let's also return the initial data because we have it already. 
    //And this would be response.data and only to modify server.js to also include both of them in ejs. 
    //So this would give me an object with two properties, the initial markup and the initial data and I want to include them both in ejs, so initial markup and initial data.
    
    //I'm going to return the initial markup that we need, and this would be the exact thing we returned before and let's also return the initial data because we have it already.
    //And this would be response.data and only to modify server.js to also include both of them in ejs. 
    //So this would give me an object with two properties, the initial markup and the initial data and I want to include them both in ejs, so initial markup and initial data.
    
    //And now in the index.js where I'm rendering the content, this is now called initial markup, I'll also include a script tag and put the initial data as a global variable on the window. 
    //Window.initialData equal the initial data that I'm reading from the ejs variable. So that would be initial data. However I can't really read it directly like that.
    
    //I'll have to stringify it so we can simply do json.stringify here and now when I refresh the server not only do I get the markup I also get a global variable that holds all the data. 
    //So in my front end component that renders instead of doing an extra hit to the API we can just render directly using window.data.contests. And I don't need Axios at all.
-->

    <script type="text/javascript">
        window.initialData = <%- JSON.stringify(initialData) -%>
    </script>
    
    <div id="root">    
        <%- initialMarkup -%>
    </div>


<%- include('footer') -%>
